if(NOT EMSCRIPTEN)
  include("FindGLEW")
else()
  pkg_check_modules (glew glew)
endif()

set(the_description "V4D Visualization Module")

macro(add_emscripten_sample sample source)
    ocv_add_executable(${sample} ${source})
    ocv_target_include_modules(${sample} opencv_core opencv_imgproc opencv_videoio opencv_video opencv_imgcodecs opencv_v4d opencv_face opencv_tracking opencv_objdetect opencv_stitching opencv_optflow opencv_imgcodecs opencv_features2d opencv_dnn  opencv_flann)
    ocv_target_link_libraries(${sample} LINK_PRIVATE opencv_core opencv_imgproc opencv_videoio opencv_video opencv_imgcodecs
    opencv_v4d opencv_face opencv_tracking opencv_objdetect opencv_stitching opencv_optflow opencv_imgcodecs opencv_features2d opencv_dnn  opencv_flann nanogui ${GLEW_LIBRARIES})
    target_link_directories(${sample} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/../../lib")
    target_compile_features(${sample} PRIVATE cxx_std_20)
    set_target_properties(${sample} PROPERTIES SUFFIX ".html")
endmacro()

macro(add_binary_sample sample)
    target_compile_features(${sample} PRIVATE cxx_std_20)
    target_link_libraries(${sample} PRIVATE nanogui GLEW::glew OpenGL::GL)
endmacro()

if(EMSCRIPTEN)
  set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -sINITIAL_MEMORY=512MB -sTOTAL_MEMORY=512MB -sALLOW_MEMORY_GROWTH=1 -sUSE_GLFW=3 -sMIN_WEBGL_VERSION=2 -sMAX_WEBGL_VERSION=2")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -sINITIAL_MEMORY=512MB -sTOTAL_MEMORY=512MB -sALLOW_MEMORY_GROWTH=1 -sUSE_GLFW=3 -sMIN_WEBGL_VERSION=2 -sMAX_WEBGL_VERSION=2")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -sINITIAL_MEMORY=512MB -sTOTAL_MEMORY=512MB -sALLOW_MEMORY_GROWTH=1 -sUSE_GLFW=3 -sMIN_WEBGL_VERSION=2 -sMAX_WEBGL_VERSION=2")
else()
  if(NOT GLEW_FOUND)
    message(STATUS "Module opencv_v4d disabled because GLEW was not found")
    ocv_module_disable(v4d)
  endif()
endif()

get_property(known_features GLOBAL PROPERTY CMAKE_CXX_KNOWN_FEATURES)
list (FIND known_features "cxx_std_20" idx)
if (${idx} LESS 0)
  message(STATUS "Module opencv_v4d disabled because it requires C++20")
  ocv_module_disable(v4d)
endif()
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -L../../lib/")

OCV_OPTION(OPENCV_V4D_ENABLE_ES "Enable OpenGL ES backend for V4D" OFF
  VERIFY HAVE_OPENGL)
OCV_OPTION(OPENCV_V4D_ES3 "Use OpenGL ES3 instead of ES2" OFF
  VERIFY OPENCV_V4D_ENABLE_ES)


find_package(Git QUIET)
if(GIT_FOUND AND EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../../.git")
# Update submodules as needed
  message(STATUS "Submodule update")
  execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive
                  WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/../../"
                  RESULT_VARIABLE GIT_SUBMOD_RESULT)
  if(NOT GIT_SUBMOD_RESULT EQUAL "0")
    message(FATAL_ERROR "git submodule update --init --recursive failed with ${GIT_SUBMOD_RESULT}, please checkout submodules")
  endif()
endif()

if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/third/nanogui/CMakeLists.txt")
    message(FATAL_ERROR "The submodules were not downloaded! GIT_SUBMODULE was turned off or failed. Please update submodules and try again.")
endif()

include_directories("${CMAKE_CURRENT_SOURCE_DIR}/third/nanogui/include/")
include_directories("${CMAKE_CURRENT_SOURCE_DIR}/third/nanogui/ext/nanovg/src/")
# include_directories(${GLEW_INCLUDE_DIRS})
# link_directories(${GLEW_LIBRARY_DIRS})

ocv_add_module(v4d opencv_core opencv_imgproc opencv_videoio opencv_video)
ocv_glob_module_sources()
ocv_module_include_directories()
ocv_create_module()
ocv_add_samples(opencv_core opencv_imgproc opencv_videoio opencv_video opencv_v4d opencv_face opencv_tracking opencv_objdetect opencv_stitching opencv_optflow opencv_imgcodecs opencv_features2d opencv_dnn opencv_flann)

if(BUILD_EXAMPLES)
  if(EMSCRIPTEN)
    set(NANOGUI_BUILD_GLFW OFF)
    include_directories("${CMAKE_CURRENT_SOURCE_DIR}/third/nanogui/ext/glfw/include/")

    add_emscripten_sample(example_v4d_display_image samples/display_image.cpp)
    add_emscripten_sample(example_v4d_display_image_fb samples/display_image_fb.cpp)
    add_emscripten_sample(example_v4d_vector_graphics samples/vector_graphics.cpp)
    add_emscripten_sample(example_v4d_vector_graphics_and_fb samples/vector_graphics_and_fb.cpp)
    add_emscripten_sample(example_v4d_render_opengl samples/render_opengl.cpp)
    add_emscripten_sample(example_v4d_custom_source_and_sink samples/custom_source_and_sink.cpp)
    add_emscripten_sample(example_v4d_font_rendering samples/font_rendering.cpp)
    add_emscripten_sample(example_v4d_font_with_gui samples/font_with_gui.cpp)
    add_emscripten_sample(example_v4d_video_editing samples/video_editing.cpp)
    add_emscripten_sample(example_v4d_cube-demo samples/cube-demo.cpp)
    add_emscripten_sample(example_v4d_video-demo samples/video-demo.cpp)
    add_emscripten_sample(example_v4d_nanovg-demo samples/nanovg-demo.cpp)
    add_emscripten_sample(example_v4d_font-demo samples/font-demo.cpp)
    add_emscripten_sample(example_v4d_shader-demo samples/shader-demo.cpp)
    add_emscripten_sample(example_v4d_pedestrian-demo samples/pedestrian-demo.cpp)
    add_emscripten_sample(example_v4d_optflow-demo samples/optflow-demo.cpp)
    add_emscripten_sample(example_v4d_beauty-demo samples/beauty-demo.cpp)
  else()
    add_binary_sample(example_v4d_display_image)
    add_binary_sample(example_v4d_custom_source_and_sink)
    add_binary_sample(example_v4d_display_image_fb)
    add_binary_sample(example_v4d_font_rendering)
    add_binary_sample(example_v4d_font_with_gui)
    add_binary_sample(example_v4d_render_opengl)
    add_binary_sample(example_v4d_vector_graphics_and_fb)
    add_binary_sample(example_v4d_vector_graphics)
    add_binary_sample(example_v4d_video_editing)
    add_binary_sample(example_v4d_cube-demo)
    add_binary_sample(example_v4d_video-demo)
    add_binary_sample(example_v4d_nanovg-demo)
    add_binary_sample(example_v4d_font-demo)
    add_binary_sample(example_v4d_shader-demo)
    add_binary_sample(example_v4d_pedestrian-demo)
    add_binary_sample(example_v4d_optflow-demo)
    add_binary_sample(example_v4d_beauty-demo)
  endif()
endif()

if(EMSCRIPTEN)
  set(NANOGUI_BUILD_SHARED OFF)
  set(OPENCV_V4D_ENABLE_ES ON)
  set(OPENCV_V4D_ES3 ON)
else()
  set(NANOGUI_BUILD_SHARED ON)
endif()
set(NANOGUI_BUILD_PYTHON OFF)
set(NANOGUI_BUILD_EXAMPLES OFF)
set(NANOGUI_BACKEND "OpenGL" CACHE STRING "Choose the backend used for rendering (OpenGL/GLES 2/GLES 3/Metal)" FORCE)

if(OPENCV_V4D_ENABLE_ES)
  if(OPENCV_V4D_ES3)
    set(NANOGUI_BACKEND "GLES 3")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DOPENCV_V4D_ES_VERSION=3")
  else()
    set(NANOGUI_BACKEND "GLES 2")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DOPENCV_V4D_ES_VERSION=2")
  endif()
else()
  set(NANOGUI_BACKEND "OpenGL")
endif()

add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/third/nanogui)

add_library(nanovg "third/nanogui/ext/nanovg/src/nanovg.c")
target_compile_features(opencv_v4d PRIVATE cxx_std_20)
target_compile_features(nanogui PRIVATE cxx_std_20)
target_compile_features(nanovg PRIVATE cxx_std_20)

ocv_warnings_disable(CMAKE_CXX_FLAGS -Wunused-parameter -Wdeprecated-enum-enum-conversion -Wformat-truncation)
target_link_directories(${the_module} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/../../lib")

if(EMSCRIPTEN)
  ocv_target_link_libraries(${the_module} -lnanogui)
else()
  ocv_target_link_libraries(${the_module} -lOpenCL -lnanogui -lnanovg OpenGL::OpenGL GLEW::glew)
endif()
